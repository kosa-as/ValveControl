import unqualified ValveController
import unqualified ValveHAL

@runtime(.MultiThreaded)
component ValveControllerImpl {
  val client : Provided<ValveController>
  val hal : Required<ValveHAL>
  machine {
    client.isOpen() = false
    client.isClosed() = false

    state Initial {
      client.setup(settings : ValveParameters) = if (hal.setParameters(settings)) {
        setNextState(Unknown);
        return true;
      } else {
        return false;
      }
    }

    // Valve position unknown until the first move request is received
    state Unknown {
      client.open() = setNextState(Moving(.Open))
      client.close() = setNextState(Moving(.Close))
    }

    state Opened {
      client.isOpen() = true
      client.open() = client.moveEnded(true)
      client.close() = setNextState(Moving(.Close))
    }

    state Closed {
      client.isClosed() = true
      client.open() = setNextState(Moving(.Open))
      client.close() = client.moveEnded(true)
    }

    execution state Moving(target : ValveHAL.Moves) {
      hal.move(target);
      setNextState(match (target) {
        .Open => Opened,
        .Close => Closed,
      });
      client.moveEnded(true);
    }
  }
}
