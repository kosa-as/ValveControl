import unqualified ValveController
import unqualified ValveDriver
import unqualified ValveHAL

@queue(1)
@runtime(.MultiThreaded)
component ValveControllerImpl {
  val client : Provided<ValveController>
  val driver : Required<ValveDriver>

  machine {
    client.isOpen() = false
    client.isClosed() = false

    state Initial {
      client.setup(settings : ValveParameters) = if (driver.setup(settings)) {
        setNextState(Ready.Unknown);
        return true;
      } else {
        return false;
      }
    }

    state Ready {
      client.open() = {
        driver.open();
        setNextState(Moving)
      }
      client.close() = {
        driver.close();
        setNextState(Moving)
      }

      // Valve position unknown until the first move request is received
      state Unknown {}

      state Opened {
        client.isOpen() = true
        client.open() = client.moveEnded(.Opened)
      }

      state Closed {
        client.isClosed() = true
        client.close() = client.moveEnded(.Closed)
      }
    }

    state Moving {
      var shutdown : Bool

      unused() = {
        shutdown = true;
      }

      driver.endOfMovement(result : ValveDriver.Status) = {
        setNextState(match (result) {
          .Opened => Ready.Opened,
          .Closed => Ready.Closed,
          .Error => Ready.Unknown,
          .Unknown => Ready.Unknown,
          .Moving => abort(),
        });
        client.moveEnded(result);
      }
    }
  }
}
