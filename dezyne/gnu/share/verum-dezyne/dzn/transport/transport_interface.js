// Generated by dzn code from dzn/transport/transport_interface.dzn
// Verum-Dezyne --- An IDE for Dezyne
//
// Copyright © 2019 Rob Wieringa <Rob.Wieringa@verum.com>
// Copyright © 2020 Paul Hoogendijk <paul.hoogendijk@verum.com>
//
// This file is part of Verum-Dezyne.
//
// Verum-Dezyne is property of Verum Software Tools BV <support@verum.com>.
// All rights reserved.
// Copyright © 2017 Jan Nieuwenhuizen <janneke@gnu.org>
// This file is part of dzn.websocket
// dzn.websocket is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 3 of the
// License, or (at your option) any later version.
// dzn.websocket is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with dzn.websocket.  If not, see
// <http://www.gnu.org/licenses/>.

function node_p () {return typeof module !== 'undefined';}
function have_dzn_p () {return typeof (dzn) !== 'undefined' && dzn;}

if (node_p ()) {
  // nodejs
  module.paths.unshift (__dirname);
  dzn_require = require;
  dzn = have_dzn_p () ? dzn : require (__dirname + '/runtime');
  dzn = dzn ||   {};
  dzn.dzn = dzn.dzn ||   {};
} else {
  // browser
  dzn_require = function ()   {return   {};};
  dzn = have_dzn_p () ? dzn :   {};
  /* Add to your html something like
  <script src="js/dzn/runtime.js"></script>
  <script src="js/transport/transport_interface.js"></script>
  */
}

dzn = dzn || {};
dzn.transport = dzn.transport || {};


dzn.transport.Iserialize = function Iserialize(meta) {
  this._dzn =   {};
  this.STATE =   {IDLE: 'STATE:IDLE',PACK: 'STATE:PACK',UNPACK: 'STATE:UNPACK',PING: 'STATE:PING'};
  this.in =   {
      pack: null
      , unpack: null
      , ping: null
    };
  this.out =   {
      message: null
      , data: null
      , pong: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}

dzn = dzn || {};
dzn.transport = dzn.transport || {};


dzn.transport.Iwebsocket = function Iwebsocket(meta) {
  this._dzn =   {};
  this.State =   {Closed: 'State:Closed',Opening: 'State:Opening',Open: 'State:Open',Closing: 'State:Closing'};
  this.in =   {
      listen: null
      , open: null
      , close: null
      , send: null
      , get: null
    };
  this.out =   {
      listening: null
      , connected: null
      , error: null
      , message: null
      , disconnect: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}
//version: 2.18.3
