// Generated by dzn code from dzn/view/view.dzn
// Verum-Dezyne --- An IDE for Dezyne
//
// Copyright © 2020 Rob Wieringa <Rob.Wieringa@verum.com>
// Copyright © 2020,2021 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
// Copyright © 2020 Paul Hoogendijk <paul.hoogendijk@verum.com>
// Copyright © 2021,2023 Rutger van Beusekom <rutger.van.beusekom@verum.com>
//
// This file is part of Verum-Dezyne.
//
// Verum-Dezyne is property of Verum Software Tools BV <support@verum.com>.
// All rights reserved.

function node_p () {return typeof module !== 'undefined';}
function have_dzn_p () {return typeof (dzn) !== 'undefined' && dzn;}

if (node_p ()) {
  // nodejs
  module.paths.unshift (__dirname);
  dzn_require = require;
  dzn = have_dzn_p () ? dzn : require (__dirname + '/runtime');
  dzn = dzn ||   {};
  dzn.dzn = dzn.dzn ||   {};
} else {
  // browser
  dzn_require = function ()   {return   {};};
  dzn = have_dzn_p () ? dzn :   {};
  /* Add to your html something like
  <script src="js/dzn/runtime.js"></script>
  <script src="js/view/view.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};


dzn.view.Idaemon_data2event = function Idaemon_data2event(meta) {
  this._dzn =   {};
  this.in =   {
      wrap: null
      , data2event: null
    };
  this.out =   {
      envelope: null
      , notify: null
      , data: null
      , go_to: null
      , go_to_index: null
      , go_to_instance: null
      , error: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}

dzn = dzn || {};
dzn.view = dzn.view || {};


dzn.view.Icontrol = function Icontrol(meta) {
  this._dzn =   {};
  this.State =   {Idle: 'State:Idle',Active: 'State:Active',Error: 'State:Error'};
  this.in =   {
      setup: null
      , test: null
    };
  this.out =   {
      error: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}

dzn = dzn || {};
dzn.view = dzn.view || {};


dzn.view.Idaemon = function Idaemon(meta) {
  this._dzn =   {};
  this.State =   {Idle: 'State:Idle',Setup: 'State:Setup',Active: 'State:Active',Error: 'State:Error'};
  this.in =   {
      setup: null
      , test: null
      , selected: null
      , request: null
      , select_instance: null
      , index_selected: null
      , back: null
      , event: null
    };
  this.out =   {
      connected: null
      , disconnect: null
      , notify: null
      , data: null
      , go_to: null
      , go_to_index: null
      , go_to_instance: null
      , error: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}

dzn = dzn || {};
dzn.view = dzn.view || {};


dzn.view.Iwidget = function Iwidget(meta) {
  this._dzn =   {};
  this.in =   {
      notify: null
      , draw: null
      , redraw: null
      , go_to: null
      , go_to_instance: null
      , go_to_index: null
      , stop: null
      , origin: null
    };
  this.out =   {
      request: null
      , selected: null
      , select_instance: null
      , index_selected: null
      , back: null
      , event: null
      , origin_label: null
    };
  this._dzn.meta = meta;
};

if (node_p ()) {
  //nodejs
  module.exports = dzn;
}

if (node_p ()) {
  // nodejs
  dzn.extend (dzn, require ('view/Daemon_data2event'));
} else {
  // browser
  /* Add to your html something like
  <script src="js/view/Daemon_data2event.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.View_controller = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['control', 'daemon', 'widget'];
  this._dzn.flushes = true;

  this.State =   {Idle: 'State:Idle',Setup: 'State:Setup',Active: 'State:Active',Error: 'State:Error'};
  this.state =  this.State.Idle;
  this.control = new dzn.view.Icontrol(  {provides:   {name: 'control', component: this}, requires:   {}});
  this.daemon = new dzn.view.Idaemon(  {provides:   {}, requires:   {name: 'daemon', component: this}});
  this.widget = new dzn.view.Iwidget(  {provides:   {}, requires:   {name: 'widget', component: this}});

  this.control.in.setup = function()  {
      if (this.state == this.State.Idle) 
        {
          this.daemon.in.setup();
          this.state = this.State.Setup;
        }
      else
      if (!(this.state == this.State.Idle)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.control.in.test = function()  {
      if (this.state == this.State.Idle)   {
          /* skip */
        }
      else
      if (this.state == this.State.Setup)   {
          /* skip */
        }
      else
      if (this.state == this.State.Active) this.daemon.in.test();
      else
      if (this.state == this.State.Error)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Error) && (!(this.state == this.State.Active) && (!(this.state == this.State.Setup) && !(this.state == this.State.Idle)))) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.connected = function()  {
      if (this.state == this.State.Setup) 
        {
          this.state = this.State.Active;
          this.widget.in.origin();
        }
      else
      if (!(this.state == this.State.Setup)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.disconnect = function()  {
      if (!(this.state == this.State.Idle)) 
        {
          this.control.out.error('daemon disconnected');
          this.widget.in.stop();
          this.state = this.State.Error;
        }
      else
      if (this.state == this.State.Idle) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.notify = function(notification)  {
      if (this.state == this.State.Active) this.widget.in.notify(notification);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.data = function(data)  {
      if (this.state == this.State.Active) this.widget.in.draw(data);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.go_to = function(selection)  {
      if (this.state == this.State.Active) this.widget.in.go_to(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.go_to_index = function(selection)  {
      if (this.state == this.State.Active) this.widget.in.go_to_index(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.go_to_instance = function(selection)  {
      if (this.state == this.State.Active) this.widget.in.go_to_instance(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.out.error = function(e)  {
      if (this.state == this.State.Active) 
        {
          this.state = this.State.Error;
          this.control.out.error(e);
        }
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.request = function(notification)  {
      if (this.state == this.State.Active) this.daemon.in.request(notification);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.selected = function(selection)  {
      if (this.state == this.State.Active) this.daemon.in.selected(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.select_instance = function(selection)  {
      if (this.state == this.State.Active) this.daemon.in.select_instance(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.index_selected = function(selection)  {
      if (this.state == this.State.Active) this.daemon.in.index_selected(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.back = function()  {
      if (this.state == this.State.Active) this.daemon.in.back();
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.event = function(event)  {
      if (this.state == this.State.Active) this.daemon.in.event(event);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.widget.out.origin_label = function(label)  {
      if (this.state == this.State.Active) this.daemon.in.request(label);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this._dzn.rt.bind (this);
};

if (node_p ()) {
  // nodejs
  module.exports = dzn;
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.Daemon_proxy_controller = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['daemon', 'transprt', 'data2event'];
  this._dzn.flushes = true;

  this.State =   {Idle: 'State:Idle',Setup: 'State:Setup',Active: 'State:Active',Closing: 'State:Closing',Error: 'State:Error'};
  this.state =  this.State.Idle;
  this.url =  undefined;
  this.daemon = new dzn.view.Idaemon(  {provides:   {name: 'daemon', component: this}, requires:   {}});
  this.transprt = new dzn.transport.Iwebsocket(  {provides:   {}, requires:   {name: 'transprt', component: this}});
  this.data2event = new dzn.view.Idaemon_data2event(  {provides:   {}, requires:   {name: 'data2event', component: this}});

  this.daemon.in.setup = function()  {
      if (this.state == this.State.Idle) 
        {
          this.state = this.State.Setup;
          this.transprt.in.open(this.url);
        }
      else
      if (!(this.state == this.State.Idle)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.test = function()  {
      if (this.state == this.State.Setup)   {
          /* skip */
        }
      else
      if (this.state == this.State.Active)   {
          /* skip */
        }
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (this.state == this.State.Error)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Error) && (!(this.state == this.State.Closing) && (!(this.state == this.State.Active) && !(this.state == this.State.Setup)))) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.selected = function(selection)  {
      if (this.state == this.State.Active) this.data2event.in.wrap('selected',selection);
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.request = function(notification)  {
      if (this.state == this.State.Active) this.data2event.in.wrap('request',notification);
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.select_instance = function(selection)  {
      if (this.state == this.State.Active) this.data2event.in.wrap('select_instance',selection);
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.index_selected = function(selection)  {
      if (this.state == this.State.Active) this.data2event.in.wrap('index_selected',selection);
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.back = function()  {
      if (this.state == this.State.Active) this.data2event.in.wrap('back',  {});
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.daemon.in.event = function(event)  {
      if (this.state == this.State.Active) this.data2event.in.wrap('event',event);
      else
      if (this.state == this.State.Closing)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Closing) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.transprt.out.listening = function()  {
      this._dzn.rt.illegal();
    }

  this.transprt.out.connected = function(ws)  {
      if (this.state == this.State.Setup) 
        {
          this.state = this.State.Active;
          this.daemon.out.connected();
        }
      else
      if (!(this.state == this.State.Setup)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.transprt.out.error = function(ws,e)  {
      if (this.state == this.State.Idle) 
        {
          var foo =   {value: console.log ('disconnect:%j', e)};
        }
      else
      if (this.state == this.State.Setup) 
        {
          this.state = this.State.Idle;
          this.daemon.out.disconnect();
        }
      else
      if (this.state == this.State.Active) 
        {
          this.state = this.State.Closing;
        }
      else
      if (this.state == this.State.Error)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Error) && (!(this.state == this.State.Active) && (!(this.state == this.State.Setup) && !(this.state == this.State.Idle)))) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.transprt.out.message = function(ws,msg)  {
      if (this.state == this.State.Active) this.data2event.in.data2event(msg);
      else
      if (this.state == this.State.Error)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Error) && !(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.transprt.out.disconnect = function(ws,msg)  {
      if (this.state == this.State.Active) 
        {
          this.state = this.State.Idle;
          this.daemon.out.disconnect();
        }
      else
      if (this.state == this.State.Closing) 
        {
          this.state = this.State.Idle;
          this.daemon.out.disconnect();
        }
      else
      if (this.state == this.State.Error)   {
          /* skip */
        }
      else
      if (!(this.state == this.State.Error) && (!(this.state == this.State.Closing) && !(this.state == this.State.Active))) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.envelope = function(data)  {
      if (this.state == this.State.Active) this.transprt.in.send(data);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.notify = function(notification)  {
      if (this.state == this.State.Active) this.daemon.out.notify(notification);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.data = function(data)  {
      if (this.state == this.State.Active) this.daemon.out.data(data);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.go_to = function(selection)  {
      if (this.state == this.State.Active) this.daemon.out.go_to(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.go_to_index = function(selection)  {
      if (this.state == this.State.Active) this.daemon.out.go_to_index(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.go_to_instance = function(selection)  {
      if (this.state == this.State.Active) this.daemon.out.go_to_instance(selection);
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this.data2event.out.error = function(e)  {
      if (this.state == this.State.Active) 
        {
          this.state = this.State.Error;
          this.daemon.out.error(e);
        }
      else
      if (!(this.state == this.State.Active)) this._dzn.rt.illegal();
      else
      this._dzn.rt.illegal();
    }

  this._dzn.rt.bind (this);
};

if (node_p ()) {
  // nodejs
  module.exports = dzn;
}

if (node_p ()) {
  // nodejs
  dzn.extend (dzn, require ('view/Trace_widget'));
} else {
  // browser
  /* Add to your html something like
  <script src="js/view/Trace_widget.js"></script>
  */
}

if (node_p ()) {
  // nodejs
  dzn.extend (dzn, require ('view/State_widget'));
} else {
  // browser
  /* Add to your html something like
  <script src="js/view/State_widget.js"></script>
  */
}

if (node_p ()) {
  // nodejs
  dzn.extend (dzn, require ('view/System_widget'));
} else {
  // browser
  /* Add to your html something like
  <script src="js/view/System_widget.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.Mux_widget = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['widget', 'left', 'right'];
  this._dzn.flushes = true;

  this.widget = new dzn.view.Iwidget(  {provides:   {name: 'widget', component: this}, requires:   {}});
  this.left = new dzn.view.Iwidget(  {provides:   {}, requires:   {name: 'left', component: this}});
  this.right = new dzn.view.Iwidget(  {provides:   {}, requires:   {name: 'right', component: this}});

  this.widget.in.notify = function(notification)  {

        {
          this.left.in.notify(notification);
          this.right.in.notify(notification);
        }
    }

  this.widget.in.draw = function(data)  {

        {
          this.left.in.draw(data);
          this.right.in.draw(data);
        }
    }

  this.widget.in.redraw = function()  {

        {
          this.left.in.redraw();
          this.right.in.redraw();
        }
    }

  this.widget.in.go_to = function(selection)  {

        {
          this.left.in.go_to(selection);
          this.right.in.go_to(selection);
        }
    }

  this.widget.in.go_to_instance = function(selection)  {

        {
          this.left.in.go_to_instance(selection);
          this.right.in.go_to_instance(selection);
        }
    }

  this.widget.in.go_to_index = function(selection)  {

        {
          this.left.in.go_to_index(selection);
          this.right.in.go_to_index(selection);
        }
    }

  this.widget.in.stop = function()  {

        {
          this.left.in.stop();
          this.right.in.stop();
        }
    }

  this.widget.in.origin = function()  {

        {
          this.left.in.origin();
          this.right.in.origin();
        }
    }

  this.left.out.request = function(notification)  {
      this.widget.out.request(notification);
    }

  this.left.out.selected = function(selection)  {
      this.widget.out.selected(selection);
    }

  this.left.out.select_instance = function(selection)  {
      this.widget.out.select_instance(selection);
    }

  this.left.out.index_selected = function(selection)  {
      this.widget.out.index_selected(selection);
    }

  this.left.out.back = function()  {
      this.widget.out.back();
    }

  this.left.out.event = function(event)  {
      this.widget.out.event(event);
    }

  this.left.out.origin_label = function(label)  {
      this.widget.out.origin_label(label);
    }

  this.right.out.request = function(notification)  {
      this.widget.out.request(notification);
    }

  this.right.out.selected = function(selection)  {
      this.widget.out.selected(selection);
    }

  this.right.out.select_instance = function(selection)  {
      this.widget.out.select_instance(selection);
    }

  this.right.out.index_selected = function(selection)  {
      this.widget.out.index_selected(selection);
    }

  this.right.out.back = function()  {
      this.widget.out.back();
    }

  this.right.out.event = function(event)  {
      this.widget.out.event(event);
    }

  this.right.out.origin_label = function(label)  {
      this.widget.out.origin_label(label);
    }

  this._dzn.rt.bind (this);
};

if (node_p ()) {
  // nodejs
  module.exports = dzn;
}

function node_p () {return typeof module !== 'undefined';}
function have_dzn_p () {return typeof (dzn) !== 'undefined' && dzn;}

if (node_p ()) {
  // nodejs
  module.paths.unshift (__dirname);
  dzn_require = require;
  dzn = have_dzn_p () ? dzn : require (__dirname + '/dzn/runtime');
} else {
  // browser
  dzn_require = function ()   {return   {};};
  dzn = have_dzn_p () ? dzn :   {};
  /* Add to your html something like
  <script src="js/view/view.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.Daemon_proxy = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['daemon'];
  this._dzn.meta.children = ['daemon_proxy','transprt','data2event'];

  this.daemon_proxy = new dzn.view.Daemon_proxy_controller(this._dzn.locator,   {parent: this, name: 'daemon_proxy'});
  this.transprt = new dzn.transport.Transport_system(this._dzn.locator,   {parent: this, name: 'transprt'});
  this.data2event = new dzn.view.Daemon_data2event(this._dzn.locator,   {parent: this, name: 'data2event'});
  this.daemon = this.daemon_proxy.daemon;
  dzn.connect(this.data2event.data2event, this.daemon_proxy.data2event);
  dzn.connect(this.transprt.websocket_transport, this.daemon_proxy.transprt);
};

if (node_p ()) {
  module.exports = dzn;
}

function node_p () {return typeof module !== 'undefined';}
function have_dzn_p () {return typeof (dzn) !== 'undefined' && dzn;}

if (node_p ()) {
  // nodejs
  module.paths.unshift (__dirname);
  dzn_require = require;
  dzn = have_dzn_p () ? dzn : require (__dirname + '/dzn/runtime');
} else {
  // browser
  dzn_require = function ()   {return   {};};
  dzn = have_dzn_p () ? dzn :   {};
  /* Add to your html something like
  <script src="js/view/view.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.Widget = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['widget'];
  this._dzn.meta.children = ['mux','mux2','sys','trace','state'];

  this.mux = new dzn.view.Mux_widget(this._dzn.locator,   {parent: this, name: 'mux'});
  this.mux2 = new dzn.view.Mux_widget(this._dzn.locator,   {parent: this, name: 'mux2'});
  this.sys = new dzn.view.System_widget(this._dzn.locator,   {parent: this, name: 'sys'});
  this.trace = new dzn.view.Trace_widget(this._dzn.locator,   {parent: this, name: 'trace'});
  this.state = new dzn.view.State_widget(this._dzn.locator,   {parent: this, name: 'state'});
  this.widget = this.mux.widget;
  dzn.connect(this.trace.widget, this.mux.left);
  dzn.connect(this.mux2.widget, this.mux.right);
  dzn.connect(this.sys.widget, this.mux2.left);
  dzn.connect(this.state.widget, this.mux2.right);
};

if (node_p ()) {
  module.exports = dzn;
}

function node_p () {return typeof module !== 'undefined';}
function have_dzn_p () {return typeof (dzn) !== 'undefined' && dzn;}

if (node_p ()) {
  // nodejs
  module.paths.unshift (__dirname);
  dzn_require = require;
  dzn = have_dzn_p () ? dzn : require (__dirname + '/dzn/runtime');
} else {
  // browser
  dzn_require = function ()   {return   {};};
  dzn = have_dzn_p () ? dzn :   {};
  /* Add to your html something like
  <script src="js/view/view.js"></script>
  */
}

dzn = dzn || {};
dzn.view = dzn.view || {};

if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport_interface'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Serialize'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/transport'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('transport/Websocket'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Daemon_data2event'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/System_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/Trace_widget'));}
if (node_p ()) {dzn.extend (dzn, dzn_require ('view/State_widget'));}

dzn.view.View = function (locator, meta) {
  dzn.runtime.init (this, locator, meta);
  this._dzn.meta.ports = ['control'];
  this._dzn.meta.children = ['controller','daemon','widget'];

  this.controller = new dzn.view.View_controller(this._dzn.locator,   {parent: this, name: 'controller'});
  this.daemon = new dzn.view.Daemon_proxy(this._dzn.locator,   {parent: this, name: 'daemon'});
  this.widget = new dzn.view.Widget(this._dzn.locator,   {parent: this, name: 'widget'});
  this.control = this.controller.control;
  dzn.connect(this.daemon.daemon, this.controller.daemon);
  dzn.connect(this.widget.widget, this.controller.widget);
};

if (node_p ()) {
  module.exports = dzn;
}
//version: 2.18.3
