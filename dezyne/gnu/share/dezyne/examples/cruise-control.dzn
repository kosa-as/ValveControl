// Dezyne --- Dezyne command line tools
//
// Copyright Â© 2022 Rutger van Beusekom <rutger@dezyne.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
// This is an example of a cruise control system.  Usually a cruise
// control system centers around the PID feedback control loop where
// functional requirements like reaching and maintaining the set
// velocity comfortably, i.e. with the proper stability and
// responsiveness.  Here we abstract away from those specific
// requirements and put the focus on the interactions between the
// different actors in the system represented as the HMI, the pedals and
// the throttle actuator.
//
// Note that the throttle actuator can be viewed as representing the
// actual PID control loop.
//
// Code:

interface ihmi
{
  in void enable ();
  in void disable ();

  in void set ();
  in void resume ();
  in void cancel ();

  out void inactive ();

  behavior
  {
    enum State {Disabled,Enabled,Active};
    enum Setpoint {Unset,Set};

    State state = State.Disabled;
    Setpoint setpoint = Setpoint.Unset;

    // always allow
    on disable: {state = State.Disabled; setpoint = Setpoint.Unset;}

    [!state.Disabled] on enable: {/* ignore when not disabled */}
    [!state.Active] on cancel: {/* ignore when not active */}
    [!state.Enabled] on set, resume: {/* ignore when not enabled */}

    [state.Disabled] on enable: state = State.Enabled;
    [state.Enabled] {
      on set: {state = State.Active; setpoint = Setpoint.Set;}
      on resume: {
        [setpoint.Set] state = State.Active;
        [setpoint.Unset] /*ignore without a previous setpoint*/;
      }
    }
    [state.Active]
    {
      on optional: {state = State.Enabled; inactive;}
      on cancel: state = State.Enabled;
    }
  }
}

interface ipedals
{
  in bool enable ();
  in void disable ();
  out void engage ();
  out void disengage ();
  behavior
  {
    bool monitor = false;
    bool engaged = false;
    [!monitor] {
      on enable: {monitor = true; reply (engaged);}
      on enable: {monitor = true; engaged = !engaged; reply (engaged);}
    }
    [monitor] {
      on disable: {monitor = false; engaged = false;}
      on inevitable: {
        engaged = !engaged;
        if (engaged) engage; else disengage;
      }
    }
  }
}

interface ithrottle
{
  in void set ();
  in void reset ();
  out void unset ();

  behavior
  {
    bool active = false;
    on set: active = true;
    on reset: active = false;
    [active] on optional: {active = false; unset;}
  }
}

interface itimer
{
  in void start ();
  out void timeout ();
  in void cancel ();
  behavior
  {
    bool idle = true;
    [idle] on start: idle = false;
    [!idle] on inevitable: timeout;
    on cancel: idle = true;
  }
}

component cruise_control
{
  provides ihmi hmi;
  requires ipedals pedals;
  requires ithrottle throttle;
  requires itimer timer;

  behavior
  {
    [hmi.state.Disabled] {
      on hmi.enable ():
      {
        bool ignore = pedals.enable ();
      }
      on hmi.disable (): {}
    }
    [!hmi.state.Disabled] {
      on hmi.enable (): {}
      on hmi.disable (): {
        throttle.reset ();
        timer.cancel ();
        pedals.disable ();
      }
    }
    [hmi.state.Enabled && timer.idle] {
      [pedals.engaged] on hmi.set (): {/* ignore */}
      [!pedals.engaged] on hmi.set (): {
        if (!pedals.engaged) {
          throttle.set ();
          timer.start ();
        }
      }
      on hmi.resume (): {
        [pedals.engaged || !hmi.setpoint.Set] {/* ignore */}
        [otherwise] {
          throttle.set ();
          timer.start ();
        }
      }
    }
    [!hmi.state.Enabled || !timer.idle] {
      on hmi.set (): {}
      on hmi.resume (): {}
    }
    on timer.timeout (): throttle.set ();
    on hmi.cancel (): {
      throttle.reset ();
      timer.cancel ();
    }
    on pedals.engage ()
      , throttle.unset (): {
      if (hmi.state.Active) hmi.inactive ();
      throttle.reset ();
      timer.cancel ();
    }
    on pedals.disengage (): {
      if (hmi.state.Active) {
        hmi.inactive ();
        timer.cancel ();
      }
    }
  }
}
