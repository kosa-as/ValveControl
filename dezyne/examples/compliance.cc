// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/error/compliance.dzn
// Dezyne --- Dezyne command line tools
//
// Copyright © 2021, 2023 Rutger van Beusekom <rutger@dezyne.org>
// Copyright © 2021 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
//
//
// Code:
#include "compliance.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
ihelloworld::ihelloworld (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, idle (true)
{}
ihelloworld::~ihelloworld ()= default;
void
ihelloworld::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
ihelloworld::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 2350421410u:
      //0:hello
      dzn_state = 4;
      break;
      case 1857620421u:
      //1:<flush>
      dzn_state = 0;
      idle = true;
      break;
      case 2350421568u:
      //2:hello
      dzn_state = 4;
      break;
      case 96793440u:
      //2:world
      dzn_state = 1;
      idle = true;
      break;
      case 632232619u:
      //4:return
      dzn_state = 2;
      idle = false;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
ihelloworld::dzn_check_bindings ()
{
  if (!this->in.hello) throw dzn::binding_error (this->dzn_meta, "in.hello");
  if (!this->out.world) throw dzn::binding_error (this->dzn_meta, "out.world");
}
namespace dzn
{
}
compliance::compliance (dzn::locator const& locator)
: dzn_meta ({"compliance","compliance",0,  {},  {},  {[this] ()
        {
          h.dzn_check_bindings ();
        }, [this] ()
        {
          w.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, h ({  {"h",&h,this,&dzn_meta},  {"h",0,0,0}},this)
, w ({  {"w",0,0,0},  {"w",&w,this,&dzn_meta}},this)
{
  dzn_runtime.native (this) = true;
  this->dzn_meta.require =   {&w.dzn_meta};
  this->h.in.hello = [this] ()
    {
      this->dzn_out_h = &this->h.in.hello.dzn_out_binding;
      this->h_hello ();
    };
  this->w.out.world = [this] ()
    {
      this->w_world ();
    };
}
void
compliance::h_hello ()
{
  this->w.in.hello ();
}
void
compliance::w_world ()
{
  ;
}
// version 2.18.3
