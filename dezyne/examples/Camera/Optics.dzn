// Dezyne --- Dezyne command line tools
//
// Copyright © 2015, 2022 Rutger van Beusekom <rutger@dezyne.org>
// Copyright © 2019, 2021 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
// Code:

interface ILens
{
  in void forward();
  in void backward();
  in void stop();

  out void stopped();

  behavior
  {
    bool moving = false;

    [!moving]
    {
      on forward: moving = true;
      on backward: moving = true;
    }
    [moving] on inevitable: {moving = false; stopped;}
    on stop: moving = false;
  }
}

component Lens
{
  provides ILens port;
}

interface IFocus
{
  in void measure();
  in void cancel();
  out void maximum();

  behavior
  {
    bool idle = true;
    [idle] on measure: idle = false;
    on cancel: idle = true;
    [!idle] on optional: {idle = true; maximum;}
  }
}
interface IContrast
{
  enum EContrast {Sharper, Blurrier};
  in EContrast measure();

  behavior
  {
    on measure: reply(EContrast.Sharper);
    on measure: reply(EContrast.Blurrier);
  }
}
component Contrast
{
  provides IContrast port;
}

component Focus
{
  provides IFocus port;
  system {
    FocusControl focus;
    Contrast sensor;
    Lens lens;

    port <=> focus.port;
    focus.lens <=> lens.port;
    focus.sensor <=> sensor.port;
  }
}

component FocusControl
{
  provides IFocus port;

  requires IContrast sensor;
  requires ILens lens;

  behavior
  {
    IContrast.EContrast contrast_was = IContrast.EContrast.Blurrier;
    on port.measure(): {contrast_was = sensor.measure(); lens.forward();}
    on port.cancel(): {lens.stop();}
    on lens.stopped():
    {
      IContrast.EContrast contrast_is = sensor.measure();
      if(contrast_was.Sharper && contrast_is.Blurrier) port.maximum();
      else if(contrast_was.Sharper && contrast_is.Sharper) lens.forward();
      else lens.backward();
      contrast_was = contrast_is;
    }
  }
}

interface IShutter
{
  in void expose();
  behavior
  {
    on expose: {}
  }
}
component Shutter
{
  provides IShutter port;
}

interface IOptics
{
  in void prepare();
  in void capture();
  in void cancel();
  out void ready();

  behavior
  {
    enum State {Idle, Prepare, Ready};
    State state = State.Idle;

    on prepare:  [state.Idle] state = State.Prepare;
    on cancel:   state = State.Idle;
    on optional: [state.Prepare] {ready; state = State.Ready;}
    on capture:  [!state.Idle]  state = State.Idle;
  }
}
component OpticsControl
{
  provides IOptics port;

  requires IShutter shutter;
  requires IFocus focus;

  behavior
  {
    on port.prepare(): focus.measure();
    on port.cancel(): focus.cancel();
    on focus.maximum(): port.ready();
    on port.capture(): {focus.cancel(); shutter.expose();}
  }
}
component Optics
{
  provides IOptics port;

  system
  {
    OpticsControl optics;

    Shutter shutter;
    Focus focus;

    port <=> optics.port;

    optics.shutter <=> shutter.port;

    optics.focus <=> focus.port;
  }
}
