// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/error/compliance.dzn
// Dezyne --- Dezyne command line tools
//
// Copyright © 2021, 2023 Rutger van Beusekom <rutger@dezyne.org>
// Copyright © 2021 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
//
//
// Code:
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef IHELLOWORLD_HH
#define IHELLOWORLD_HH
struct ihelloworld
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> hello;
    } in;
  struct
    {
      dzn::out::event<void ()> world;
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  bool idle;
  ihelloworld (dzn::port::meta const& m);
  template <typename Component>
  ihelloworld (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
  , idle (true)
    {
      in.hello.set (that, this, "hello");
      out.world.set (that, this, "world");
    }
  virtual ~ihelloworld ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::ihelloworld& provide, ::ihelloworld& require)
    {
      require.out.world.other_port_update = provide.out.world.port_update;
      provide.out.world = require.out.world;
      require.in.hello = provide.in.hello;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IHELLOWORLD_HH
#ifndef COMPLIANCE_HH
#define COMPLIANCE_HH
struct compliance: public dzn::component
{
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  std::function<void ()>* dzn_out_h;
  ::ihelloworld h;
  ::ihelloworld w;
  compliance (dzn::locator const& locator);
  private:
  void h_hello ();
  void w_world ();
};
#endif // COMPLIANCE_HH
// version 2.18.3
