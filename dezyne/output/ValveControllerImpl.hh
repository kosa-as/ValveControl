// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/controll/ValveControllerImpl.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#include "ValveController.hh"
#include "ValveHAL.hh"
#ifndef VALVECONTROLLERIMPL_HH
#define VALVECONTROLLERIMPL_HH
#include "ValveController.hh"
#include "ValveHAL.hh"
struct ValveControllerImpl: public dzn::component
{
  enum struct implState
    {
      Initial,Unknown,Opened,Closed
    };
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  ::ValveControllerImpl::implState s;
  std::function<void ()>* dzn_out_client;
  ::ValveController client;
  ::ValveHAL hal;
  ValveControllerImpl (dzn::locator const& locator);
  private:
  void client_setup ();
  void client_open ();
  void client_close ();
};
namespace dzn
{
  char const* to_cstr (::ValveControllerImpl::implState v);
  template <>
  std::string to_string (::ValveControllerImpl::implState v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::ValveControllerImpl::implState v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::ValveControllerImpl::implState to_ValveControllerImpl_implState (std::string s);
}
#endif // VALVECONTROLLERIMPL_HH
// version 2.18.3
