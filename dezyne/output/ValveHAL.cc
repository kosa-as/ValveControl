// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/controll/ValveHAL.dzn
#include "ValveHAL.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
ValveHAL::ValveHAL (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
{}
ValveHAL::~ValveHAL ()= default;
void
ValveHAL::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
ValveHAL::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 1454718270u:
      //0:move
      dzn_state = 1;
      break;
      case 632232382u:
      //1:return
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
ValveHAL::dzn_check_bindings ()
{
  if (!this->in.move) throw dzn::binding_error (this->dzn_meta, "in.move");
}
namespace dzn
{
}
namespace dzn
{
  char const*
  to_cstr (::ValveHAL::Moves v)
    {
      switch (v)
        {
          case ::ValveHAL::Moves::Open: return "Moves:Open";
          case ::ValveHAL::Moves::Close: return "Moves:Close";
        }
      return "";
    }
  template <>
  std::string
  to_string (::ValveHAL::Moves v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::ValveHAL::Moves
  to_ValveHAL_Moves (std::string s)
    {
      static std::map<std::string, ::ValveHAL::Moves> m =   {
            {"Moves:Open", ::ValveHAL::Moves::Open},
            {"Moves:Close", ::ValveHAL::Moves::Close}};
      return m.at (s);
    }
}
// version 2.18.3
