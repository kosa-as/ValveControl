// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/controll/ValveHAL.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef VALVEHAL_HH
#define VALVEHAL_HH
struct ValveHAL
{
  enum Moves
    {
      Open,Close
    };
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void (Moves target)> move;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ValveHAL (dzn::port::meta const& m);
  template <typename Component>
  ValveHAL (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.move.set (that, this, "move");
    }
  virtual ~ValveHAL ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::ValveHAL& provide, ::ValveHAL& require)
    {
      require.in.move = provide.in.move;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
namespace dzn
{
  char const* to_cstr (::ValveHAL::Moves v);
  template <>
  std::string to_string (::ValveHAL::Moves v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::ValveHAL::Moves v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::ValveHAL::Moves to_ValveHAL_Moves (std::string s);
}
#endif // VALVEHAL_HH
// version 2.18.3
