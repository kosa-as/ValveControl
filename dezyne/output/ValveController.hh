// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/controll/ValveController.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef VALVECONTROLLER_HH
#define VALVECONTROLLER_HH
struct ValveController
{
  enum struct valveState
    {
      Init,Operational
    };
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> setup;
      dzn::in::event<void ()> open;
      dzn::in::event<void ()> close;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ::ValveController::valveState s;
  ValveController (dzn::port::meta const& m);
  template <typename Component>
  ValveController (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
  , s (::ValveController::valveState::Init)
    {
      in.setup.set (that, this, "setup");
      in.open.set (that, this, "open");
      in.close.set (that, this, "close");
    }
  virtual ~ValveController ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::ValveController& provide, ::ValveController& require)
    {
      require.in.setup = provide.in.setup;
      require.in.open = provide.in.open;
      require.in.close = provide.in.close;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // VALVECONTROLLER_HH
// version 2.18.3
