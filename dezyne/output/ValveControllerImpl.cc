// Generated by dzn code from c:/Users/ticp/Downloads/dezyne/examples/controll/ValveControllerImpl.dzn
#include "ValveControllerImpl.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
ValveControllerImpl::ValveControllerImpl (dzn::locator const& locator)
: dzn_meta ({"ValveControllerImpl","ValveControllerImpl",0,  {},  {},  {[this] ()
        {
          client.dzn_check_bindings ();
        }, [this] ()
        {
          hal.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, s (::ValveControllerImpl::implState::Initial)
, client ({  {"client",&client,this,&dzn_meta},  {"client",0,0,0}},this)
, hal ({  {"hal",0,0,0},  {"hal",&hal,this,&dzn_meta}},this)
{
  dzn_runtime.native (this) = true;
  this->dzn_meta.require =   {&hal.dzn_meta};
  this->client.in.setup = [this] ()
    {
      this->dzn_out_client = &this->client.in.setup.dzn_out_binding;
      this->client_setup ();
    };
  this->client.in.open = [this] ()
    {
      this->dzn_out_client = &this->client.in.open.dzn_out_binding;
      this->client_open ();
    };
  this->client.in.close = [this] ()
    {
      this->dzn_out_client = &this->client.in.close.dzn_out_binding;
      this->client_close ();
    };
}
void
ValveControllerImpl::client_setup ()
{
  if (this->s == ::ValveControllerImpl::implState::Initial) this->s = ::ValveControllerImpl::implState::Unknown;
  else if (!(this->s == ::ValveControllerImpl::implState::Initial)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
ValveControllerImpl::client_open ()
{
  if (this->s == ::ValveControllerImpl::implState::Unknown)
    {
      this->hal.in.move (ValveHAL::Moves::Open);
      this->s = ::ValveControllerImpl::implState::Opened;
    }
  else if (this->s == ::ValveControllerImpl::implState::Closed)
    {
      this->hal.in.move (ValveHAL::Moves::Open);
      this->s = ::ValveControllerImpl::implState::Opened;
    }
  else if (!(this->s == ::ValveControllerImpl::implState::Closed) && !(this->s == ::ValveControllerImpl::implState::Unknown)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
ValveControllerImpl::client_close ()
{
  if (this->s == ::ValveControllerImpl::implState::Unknown)
    {
      this->hal.in.move (ValveHAL::Moves::Close);
      this->s = ::ValveControllerImpl::implState::Closed;
    }
  else if (this->s == ::ValveControllerImpl::implState::Opened)
    {
      this->hal.in.move (ValveHAL::Moves::Close);
      this->s = ::ValveControllerImpl::implState::Closed;
    }
  else if (!(this->s == ::ValveControllerImpl::implState::Opened) && !(this->s == ::ValveControllerImpl::implState::Unknown)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
namespace dzn
{
  char const*
  to_cstr (::ValveControllerImpl::implState v)
    {
      switch (v)
        {
          case ::ValveControllerImpl::implState::Initial: return "implState:Initial";
          case ::ValveControllerImpl::implState::Unknown: return "implState:Unknown";
          case ::ValveControllerImpl::implState::Opened: return "implState:Opened";
          case ::ValveControllerImpl::implState::Closed: return "implState:Closed";
        }
      return "";
    }
  template <>
  std::string
  to_string (::ValveControllerImpl::implState v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::ValveControllerImpl::implState
  to_ValveControllerImpl_implState (std::string s)
    {
      static std::map<std::string, ::ValveControllerImpl::implState> m =   {
            {"implState:Initial", ::ValveControllerImpl::implState::Initial},
            {"implState:Unknown", ::ValveControllerImpl::implState::Unknown},
            {"implState:Opened", ::ValveControllerImpl::implState::Opened},
            {"implState:Closed", ::ValveControllerImpl::implState::Closed}};
      return m.at (s);
    }
}
// version 2.18.3
