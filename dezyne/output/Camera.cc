// Generated by dzn code from C:/Users/ticp/Downloads/dezyne/examples/Camera/Camera.dzn
// Dezyne --- Dezyne command line tools
//
// Copyright © 2015, 2022 Rutger van Beusekom <rutger@dezyne.org>
// Copyright © 2015 Rob Wieringa <rma.wieringa@gmail.com>
// Copyright © 2016, 2019, 2020, 2021 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
// Copyright © 2016, 2018 Paul Hoogendijk <paul@dezyne.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
// Code:
// camera hardware:
//   lens: focus => ILens
//   shutter => IShutter
//   flash => IFlash
//   sensor acquire image => ISensor
//   memory: store/retrieve image => IMemory
// camera software abstractions:
//   optics: controls the optical path: lens, focus, shutter
//   acquisition: controls the imaging path: sensor, memory
//   driver: relays user control to optics and acquisition
#include "Camera.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
IControl::IControl (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, state (::IControl::State::Idle)
{}
IControl::~IControl ()= default;
void
IControl::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IControl::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 2860114173u:
      //0:setup
      dzn_state = 9;
      break;
      case 632232382u:
      //1:return
      dzn_state = 0;
      state = IControl::State::Idle;
      break;
      case 3797442745u:
      //2:image
      dzn_state = 3;
      state = IControl::State::Acquire;
      break;
      case 1857620579u:
      //3:<flush>
      dzn_state = 0;
      state = IControl::State::Idle;
      break;
      case 632232619u:
      //4:return
      dzn_state = 2;
      state = IControl::State::Acquire;
      break;
      case 865364872u:
      //5:focus_lock
      dzn_state = 7;
      state = IControl::State::Ready;
      break;
      case 1943965682u:
      //5:release
      dzn_state = 1;
      break;
      case 3071587258u:
      //5:shoot
      dzn_state = 4;
      break;
      case 1857620895u:
      //7:<flush>
      dzn_state = 8;
      state = IControl::State::Ready;
      break;
      case 1943965919u:
      //8:release
      dzn_state = 1;
      break;
      case 3071587495u:
      //8:shoot
      dzn_state = 4;
      break;
      case 632233014u:
      //9:return
      dzn_state = 5;
      state = IControl::State::Setup;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IControl::dzn_check_bindings ()
{
  if (!this->in.setup) throw dzn::binding_error (this->dzn_meta, "in.setup");
  if (!this->in.shoot) throw dzn::binding_error (this->dzn_meta, "in.shoot");
  if (!this->in.release) throw dzn::binding_error (this->dzn_meta, "in.release");
  if (!this->out.focus_lock) throw dzn::binding_error (this->dzn_meta, "out.focus_lock");
  if (!this->out.image) throw dzn::binding_error (this->dzn_meta, "out.image");
}
namespace dzn
{
}
Driver::Driver (dzn::locator const& locator)
: dzn_meta ({"Driver","Driver",0,  {},  {},  {[this] ()
        {
          control.dzn_check_bindings ();
        }, [this] ()
        {
          acquisition.dzn_check_bindings ();
        }, [this] ()
        {
          optics.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, control ({  {"control",&control,this,&dzn_meta},  {"control",0,0,0}},this)
, acquisition ({  {"acquisition",0,0,0},  {"acquisition",&acquisition,this,&dzn_meta}},this)
, optics ({  {"optics",0,0,0},  {"optics",&optics,this,&dzn_meta}},this)
{
  dzn_runtime.native (this) = true;
  this->dzn_meta.require =   {&acquisition.dzn_meta,&optics.dzn_meta};
  this->control.in.setup = [this] ()
    {
      this->dzn_out_control = &this->control.in.setup.dzn_out_binding;
      this->control_setup ();
    };
  this->control.in.shoot = [this] ()
    {
      this->dzn_out_control = &this->control.in.shoot.dzn_out_binding;
      this->control_shoot ();
    };
  this->control.in.release = [this] ()
    {
      this->dzn_out_control = &this->control.in.release.dzn_out_binding;
      this->control_release ();
    };
  this->acquisition.out.image = [this] ()
    {
      this->acquisition_image ();
    };
  this->optics.out.ready = [this] ()
    {
      this->optics_ready ();
    };
}
void
Driver::control_setup ()
{
  this->acquisition.in.prepare ();
  this->optics.in.prepare ();
}
void
Driver::control_shoot ()
{
  this->acquisition.in.acquire ();
  this->optics.in.capture ();
}
void
Driver::control_release ()
{
  this->acquisition.in.cancel ();
  this->optics.in.cancel ();
}
void
Driver::acquisition_image ()
{
  this->control.out.image ();
}
void
Driver::optics_ready ()
{
  this->control.out.focus_lock ();
}
Camera::Camera (dzn::locator const& locator)
: dzn_meta ({"Camera","Camera",0,  {},  {},  {[this] ()
        {
          control.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, driver (dzn_locator)
, acquisition (dzn_locator)
, optics (dzn_locator)
, control (this->driver.control)
{
  driver.control.dzn_meta.require.name = "control";
  dzn_meta.require =   {};
  dzn_meta.children =   {&driver.dzn_meta,&acquisition.dzn_meta,&optics.dzn_meta};
  driver.dzn_meta.parent = &dzn_meta;
  driver.dzn_meta.name = "driver";
  acquisition.dzn_meta.parent = &dzn_meta;
  acquisition.dzn_meta.name = "acquisition";
  optics.dzn_meta.parent = &dzn_meta;
  optics.dzn_meta.name = "optics";
  dzn::connect (this->acquisition.port, this->driver.acquisition);
  dzn::connect (this->optics.port, this->driver.optics);
}
// version 2.18.3
